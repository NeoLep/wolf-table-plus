import { Range } from './table-renderer';
import Selector from './selector';
import { type MoveDirection } from '.';
import type { SupportFormats } from './data/format';
import type { DataCell } from './data';
import type { Style, Border } from './table-renderer';
import type Table from '.';
declare function init(t: Table): void;
declare function setCellValue(t: Table, value: DataCell): void;
declare function clearCellValue(t: Table): void;
declare function clearCell(t: Table): void;
/** r,c is in the selected region */
declare function isInRange(t: Table, r: number, c: number): boolean;
declare function addRange(t: Table, r: number, c: number, clear: boolean): void;
declare function unionRange(t: Table, r: number, c: number): void;
declare function reset(t: Table): void;
declare function move(t: Table, reselect: boolean, direction: MoveDirection, step?: number): void;
declare function bindMousemove(t: Table, moveChange: (row: number, col: number) => void, changedRange: (s: Selector) => Range | null | undefined, upAfter?: (s: Selector) => void): void;
declare function showCopy(t: Table): void;
declare function clearCopy(t: Table): void;
declare function copyValue(table: Table): void;
declare function pasteValue(table: Table, onlyCopyText?: boolean, isCutted?: boolean): void;
declare function fastSetCellFormat(table: Table, format?: SupportFormats): void;
declare function fastSetCellFixed(table: Table, type: 'increase' | 'reduce'): void;
declare function setCellStyle(table: Table, style: Partial<Style>): void;
declare function fastSetCellStyle(table: Table, type: 'bold' | 'underline' | 'italic' | 'strikethrough' | 'textwrap'): void;
declare function fastClearCellStyle(table: Table): void;
declare function fastClearCellFormat(table: Table): void;
declare function insertRowOrCol(table: Table, type: 'row' | 'col'): void;
declare function deleteRowOrCol(table: Table, type: 'row' | 'col'): void;
declare function setBorder(table: Table, config: {
    type: Border[1];
    lineStyle: Border[2];
    color: Border[3];
}): void;
declare function clearBorder(table: Table): void;
declare function mergeGrid(table: Table): void;
declare function freezeGrid(table: Table): void;
declare function paintFormat(table: Table): void;
declare const _default: {
    init: typeof init;
    setCellStyle: typeof setCellStyle;
    fastSetCellStyle: typeof fastSetCellStyle;
    fastClearCellStyle: typeof fastClearCellStyle;
    fastClearCellFormat: typeof fastClearCellFormat;
    fastSetCellFormat: typeof fastSetCellFormat;
    fastSetCellFixed: typeof fastSetCellFixed;
    setCellValue: typeof setCellValue;
    clearCellValue: typeof clearCellValue;
    clearCell: typeof clearCell;
    addRange: typeof addRange;
    unionRange: typeof unionRange;
    reset: typeof reset;
    move: typeof move;
    bindMousemove: typeof bindMousemove;
    showCopy: typeof showCopy;
    clearCopy: typeof clearCopy;
    copyValue: typeof copyValue;
    pasteValue: typeof pasteValue;
    insertRowOrCol: typeof insertRowOrCol;
    deleteRowOrCol: typeof deleteRowOrCol;
    isInRange: typeof isInRange;
    setBorder: typeof setBorder;
    clearBorder: typeof clearBorder;
    mergeGrid: typeof mergeGrid;
    freezeGrid: typeof freezeGrid;
    paintFormat: typeof paintFormat;
};
export default _default;
